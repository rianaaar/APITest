{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-16T06:54:01.368Z",
    "end": "2023-09-16T06:54:14.287Z",
    "duration": 12919,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1fa1e560-7504-46fb-acbe-dbb5387d93ac",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
          "title": "POST Bookstore",
          "fullFile": "F:\\Test QA\\API Bookstore Automation\\test\\specs\\Bookstore.js",
          "file": "\\test\\specs\\Bookstore.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST Bookstore\"",
              "fullTitle": "POST Bookstore \"before each\" hook in \"POST Bookstore\"",
              "timedOut": false,
              "duration": 1011,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await Token(login);\n//console.log(res);\nauth = await res.body.token;\n//console.log(auth);",
              "err": {},
              "uuid": "2c96a676-83ab-4ec3-819c-d3ca8cc25631",
              "parentUUID": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add List of book use valid userId",
              "fullTitle": "POST Bookstore Add List of book use valid userId",
              "timedOut": false,
              "duration": 1095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.books[0].isbn).to.equal(isbn);\n//console.log(response.body.books[0].isbn);",
              "err": {},
              "uuid": "baa2141f-6a11-4a1a-affe-d9b59bbd61e9",
              "parentUUID": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book use invalid userid",
              "fullTitle": "POST Bookstore Add List of book use invalid userid",
              "timedOut": false,
              "duration": 1179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": \"11111\",\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(401);\nexpect((await response).body.message).to.equal(\"User Id not correct!\");",
              "err": {},
              "uuid": "6b46d329-af0a-4754-8b6f-7d987c8ffa79",
              "parentUUID": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book that already exist",
              "fullTitle": "POST Bookstore Add List of book that already exist",
              "timedOut": false,
              "duration": 1041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(400);\nexpect((await response).body.message).to.equal(\"ISBN already present in the User's Collection!\");\n//console.log(response.body.isbn);",
              "err": {},
              "uuid": "a26ac65a-c804-4f69-9bd2-f682731bee85",
              "parentUUID": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book use invalid ISBN",
              "fullTitle": "POST Bookstore Add List of book use invalid ISBN",
              "timedOut": false,
              "duration": 662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": 12345\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(400);\nexpect((await response).body.message).to.equal(\"ISBN supplied is not available in Books Collection!\");",
              "err": {},
              "uuid": "64200f43-2d94-498e-b06e-560d1e36b63f",
              "parentUUID": "41a991ee-52b8-492d-beac-7fd6e101b6b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "baa2141f-6a11-4a1a-affe-d9b59bbd61e9",
            "6b46d329-af0a-4754-8b6f-7d987c8ffa79",
            "a26ac65a-c804-4f69-9bd2-f682731bee85",
            "64200f43-2d94-498e-b06e-560d1e36b63f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3977,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6d6a8d83-660d-478b-9729-5c53db865fe8",
          "title": "DELETE Books",
          "fullFile": "F:\\Test QA\\API Bookstore Automation\\test\\specs\\DeleteBooks.js",
          "file": "\\test\\specs\\DeleteBooks.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE Books\"",
              "fullTitle": "DELETE Books \"before each\" hook in \"DELETE Books\"",
              "timedOut": false,
              "duration": 883,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await Token(login);\nauth = await res.body.token;\nconsole.log(auth);",
              "err": {},
              "uuid": "2c194007-fa91-44fa-b765-4e1fe1c58fb0",
              "parentUUID": "6d6a8d83-660d-478b-9729-5c53db865fe8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete List of book",
              "fullTitle": "DELETE Books Delete List of book",
              "timedOut": false,
              "duration": 770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).delete(`/BookStore/v1/Books?UserId=${userId}`)\n                                    .set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(204);\n//expect((await response).body).to.null;\nconsole.log(response.body);",
              "err": {},
              "uuid": "cedf1df6-0394-43ca-b8b0-76af03d882f3",
              "parentUUID": "6d6a8d83-660d-478b-9729-5c53db865fe8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get List of book from user to validate",
              "fullTitle": "DELETE Books Get List of book from user to validate",
              "timedOut": false,
              "duration": 643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).get(`/Account/v1/User/${userId}`)\n                                    .set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(200);\nexpect((await response).body.books).to.empty;\n//console.log(response.body);",
              "err": {},
              "uuid": "43a9f10f-c031-40fb-b804-5f25562b58a5",
              "parentUUID": "6d6a8d83-660d-478b-9729-5c53db865fe8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cedf1df6-0394-43ca-b8b0-76af03d882f3",
            "43a9f10f-c031-40fb-b804-5f25562b58a5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1413,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}