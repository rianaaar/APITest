{
  "stats": {
    "suites": 2,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2023-09-16T05:56:25.753Z",
    "end": "2023-09-16T05:56:33.480Z",
    "duration": 7727,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "af6e3280-5106-4565-9e7f-907332532a0b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
          "title": "POST Bookstore",
          "fullFile": "F:\\Test QA\\API Automation Wdio\\test\\specs\\Bookstore.js",
          "file": "\\test\\specs\\Bookstore.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"POST Bookstore\"",
              "fullTitle": "POST Bookstore \"before each\" hook in \"POST Bookstore\"",
              "timedOut": false,
              "duration": 980,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await Token(login);\n//console.log(res);\nauth = await res.body.token;\nconsole.log(auth);",
              "err": {},
              "uuid": "e9b5d9ba-f40f-4a9f-8d5f-3829b1e63ddf",
              "parentUUID": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Add List of book use valid userId",
              "fullTitle": "POST Bookstore Add List of book use valid userId",
              "timedOut": false,
              "duration": 674,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(201);\nexpect((await response).body.books[0].isbn).to.equal(isbn);\n//console.log(response.body.books[0].isbn);",
              "err": {},
              "uuid": "864fab24-cde8-4849-904a-6a89f6e1c191",
              "parentUUID": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book use invalid userid",
              "fullTitle": "POST Bookstore Add List of book use invalid userid",
              "timedOut": false,
              "duration": 583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": \"11111\",\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(401);\nexpect((await response).body.message).to.equal(\"User Id not correct!\");",
              "err": {},
              "uuid": "5e0b81e9-a4ba-45fb-b0a3-ca68ab252ba1",
              "parentUUID": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book that already exist",
              "fullTitle": "POST Bookstore Add List of book that already exist",
              "timedOut": false,
              "duration": 616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": isbn\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(400);\nexpect((await response).body.message).to.equal(\"ISBN already present in the User's Collection!\");\n//console.log(response.body.isbn);",
              "err": {},
              "uuid": "2118d687-ee3d-485a-ac26-f3de75496742",
              "parentUUID": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add List of book use invalid ISBN",
              "fullTitle": "POST Bookstore Add List of book use invalid ISBN",
              "timedOut": false,
              "duration": 658,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).post(\"/BookStore/v1/Books\")\n                                    .send({\n                                        \"userId\": userId,\n                                        \"collectionOfIsbns\": [\n                                          {\n                                            \"isbn\": 12345\n                                          }\n                                        ]\n                                    }).set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(400);\nexpect((await response).body.message).to.equal(\"ISBN supplied is not available in Books Collection!\");",
              "err": {},
              "uuid": "38519640-fd09-465a-8f6d-53fdfc0a4442",
              "parentUUID": "2a5f0837-b040-4f11-a956-dfb7dff3dec3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "864fab24-cde8-4849-904a-6a89f6e1c191",
            "5e0b81e9-a4ba-45fb-b0a3-ca68ab252ba1",
            "2118d687-ee3d-485a-ac26-f3de75496742",
            "38519640-fd09-465a-8f6d-53fdfc0a4442"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2531,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "779dc7e3-0bbc-4b6e-9411-fe5f2fad24a0",
          "title": "DELETE Books",
          "fullFile": "F:\\Test QA\\API Automation Wdio\\test\\specs\\DeleteBooks.js",
          "file": "\\test\\specs\\DeleteBooks.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"DELETE Books\"",
              "fullTitle": "DELETE Books \"before each\" hook in \"DELETE Books\"",
              "timedOut": false,
              "duration": 849,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await Token(login);\nauth = await res.body.token;\nconsole.log(auth);",
              "err": {},
              "uuid": "147c0d62-8468-4348-a7e9-1b18549a9743",
              "parentUUID": "779dc7e3-0bbc-4b6e-9411-fe5f2fad24a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Delete List of book",
              "fullTitle": "DELETE Books Delete List of book",
              "timedOut": false,
              "duration": 722,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = request(base.baseURL).delete(`/BookStore/v1/Books?UserId=${userId}`)\n                                    .set(\"Authorization\", `Bearer ${auth}`);\nconsole.log(\"status code is = \" + (await response).status);\nconsole.log(\"Response Body = \");\nconsole.log((await response).body);\nexpect((await response).status).to.equal(204);\n//expect((await response).body).to.null;\nconsole.log(response.body);",
              "err": {},
              "uuid": "2b7df71e-be0f-4101-9b4f-bee4e1511af9",
              "parentUUID": "779dc7e3-0bbc-4b6e-9411-fe5f2fad24a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b7df71e-be0f-4101-9b4f-bee4e1511af9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 722,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}